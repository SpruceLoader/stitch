plugins {
	id "java"
	id "java-library"
	id "maven-publish"
	// id "net.minecrell.licenser" version "0.4.1"
}

sourceCompatibility = 1.8

version = "1.1.0"
group = 'xyz.spruceloader'
archivesBaseName = project.name.toLowerCase()

String gitBranch = System.getenv("GITHUB_REF_NAME")
String gitCommit = System.getenv("GITHUB_SHA")
if (gitBranch != null && gitCommit != null) {
	String shortenedCommit = gitCommit.substring(0, 7)
	version = "$version-SNAPSHOT+$gitBranch-$shortenedCommit"
}

repositories {
	mavenCentral()
	maven {
		name = 'Fabric'
		url = 'https://maven.fabricmc.net/'
	}
}

configurations {
	ship
	enigma
	implementation.extendsFrom ship
	compileOnly.extendsFrom enigma
	testImplementation.extendsFrom enigma
}

dependencies {
	ship 'org.ow2.asm:asm:9.1'
	ship 'org.ow2.asm:asm-commons:9.1'
	ship 'org.ow2.asm:asm-tree:9.1'
	ship 'org.ow2.asm:asm-util:9.1'
	ship 'net.fabricmc:tiny-mappings-parser:0.3.0+build.17'
	implementation 'com.google.guava:guava:28.0-jre'
	compileOnly 'org.jetbrains:annotations:20.1.0'

	enigma 'cuchaz:enigma:0.23.2'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
}

// license {
// 	   header project.file("HEADER")
// 	   include "**/*.java"
// }

jar {
	manifest {
		attributes 'Implementation-Title': 'Stitch',
				'Implementation-Version': archiveVersion,
				'Main-Class': "net.fabricmc.stitch.Main"
	}
}

task allJar(type: Jar) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from {
		configurations.ship.collect {
			it.isDirectory() ? it : zipTree(it)
		}
	}
	manifest {
		attributes 'Implementation-Title': 'Stitch',
				'Implementation-Version': archiveVersion,
				'Main-Class': "net.fabricmc.stitch.Main"
	}
	archiveClassifier = 'all'
	with jar
}

java {
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

void applyRepoCredentials(MavenArtifactRepository repo) {
	repo.authentication.create("basic", BasicAuthentication.class)
	repo.credentials {
		username = getPublishingUsername()
		password = getPublishingPassword()
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact(allJar)
		}
	}

	repositories {
		String publishingUsername = getPublishingUsername()
		String publishingPassword = getPublishingPassword()
		if (publishingUsername != null && publishingPassword != null) {
			maven {
				name = "SpruceLoaderReleases"
				url = uri("https://maven.spruceloader.xyz/releases")
				applyRepoCredentials(it)
			}

			maven {
				name = "SpruceLoaderSnapshots"
				url = uri("https://maven.spruceloader.xyz/snapshots")
				applyRepoCredentials(it)
			}
		}
	}
}

test {
	useJUnitPlatform()
}

String getPublishingUsername() {
	Object prop = project.findProperty("spruceloader.publishing.username")
	if (prop != null) return prop.toString()

	return System.getenv("SPRUCELOADER_PUBLISHING_USERNAME")
}

String getPublishingPassword() {
	Object prop = project.findProperty("spruceloader.publishing.password")
	if (prop != null) return prop.toString()

	return System.getenv("SPRUCELOADER_PUBLISHING_PASSWORD")
}
